#!/bin/bash

# Pre-push hook for comprehensive API validation with interactive UI
# This hook runs before pushing to remote repository

set -e

# Get the directory where this script is located
HOOK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
APIGENIE_ROOT="$(dirname "$HOOK_DIR")"
REPO_ROOT="$(pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running comprehensive API validation before push...${NC}"

# Dynamic Python detection
if command -v python3 &> /dev/null; then
    PYTHON=python3
elif command -v python &> /dev/null; then
    PYTHON=python
else
    echo -e "${RED}Error: Python is not installed or not in PATH${NC}"
    exit 1
fi

# Check if validation module exists
if [ ! -f "$APIGENIE_ROOT/validation/api_validator.py" ]; then
    echo -e "${RED}Error: API validation module not found${NC}"
    exit 1
fi

# Read from stdin
while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        # Branch is being deleted, nothing to validate
        continue
    fi
    
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch, validate all commits
        range="$local_sha"
    else
        # Existing branch, validate new commits
        range="$remote_sha..$local_sha"
    fi
    
    # Get list of changed files in the push
    CHANGED_FILES=$(git diff --name-only "$range")
    
    if [ -n "$CHANGED_FILES" ]; then
        echo -e "${YELLOW}Validating changes in range: $range${NC}"
        
        # Run comprehensive validation with interactive mode
        cd "$APIGENIE_ROOT"
        $PYTHON -m validation.api_validator --commit-range="$range" --interactive --repo-path "$REPO_ROOT"
        
        VALIDATION_EXIT_CODE=$?
        
        if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
            echo -e "${RED}✗ Validation failed or was cancelled${NC}"
            echo -e "${YELLOW}Push aborted.${NC}"
            exit 1
        else
            echo -e "${GREEN}✓ Validation passed or proceeded with justification${NC}"
        fi
    else
        echo -e "${YELLOW}No file changes detected in push range${NC}"
    fi

done

echo -e "${BLUE}DEBUG: Reached end of main validation loop${NC}"

# Run the local pre_push.py script from the hooks directory
PYTHON_SCRIPT="$HOOK_DIR/pre_push.py"

echo -e "${BLUE}DEBUG: About to check for Python script at: $PYTHON_SCRIPT${NC}"

# Check if the Python script exists
echo -e "${BLUE}DEBUG: Checking if file exists: $PYTHON_SCRIPT${NC}"
if [ -f "$PYTHON_SCRIPT" ]; then
    echo -e "${BLUE}DEBUG: Python script found, proceeding with execution${NC}"
    # Make the Python script executable (Unix-like systems only)
    if [ "$(uname)" != "MINGW"* ] && [ "$(uname)" != "MSYS"* ]; then
        chmod +x "$PYTHON_SCRIPT"
    fi

    echo -e "${YELLOW}Running additional pre-push validation...${NC}"
    echo -e "${BLUE}Executing: $PYTHON $PYTHON_SCRIPT${NC}"
    
    # Run the Python script using the same Python command we detected earlier
    # Pass the repository root as an environment variable
    REPO_ROOT="$REPO_ROOT" $PYTHON "$PYTHON_SCRIPT"
    
    PYTHON_EXIT_CODE=$?
    
    echo -e "${BLUE}Python script exit code: $PYTHON_EXIT_CODE${NC}"
    
    if [ $PYTHON_EXIT_CODE -ne 0 ]; then
        echo -e "${RED}✗ Additional validation failed${NC}"
        echo -e "${YELLOW}Push aborted.${NC}"
        exit 1
    else
        echo -e "${GREEN}✓ Additional validation passed${NC}"
    fi
else
    echo -e "${YELLOW}DEBUG: Additional pre_push.py script not found at $PYTHON_SCRIPT, skipping${NC}"
fi

echo -e "${BLUE}DEBUG: Finished Python script section${NC}"

echo -e "${GREEN}✓ Pre-push validation completed successfully${NC}"
exit 0 